@model School.Entities.Fields.Student

@{ 
    string hh = "9999";
}
<style>
    #childPage {
        width: 800px;
        left: calc(50% - 400px);
        display: none;
    }

        #childPage #partialHolder {
            /*height: calc(100% - 2px);*/
            border: none;
            overflow-y: hidden;
            overflow-x: hidden;
            max-height: 260px;
        }

 
</style>


@using (Ajax.BeginForm("Save", "Student", new AjaxOptions { OnSuccess = "OnSuccess", OnFailure = "OnFailure", HttpMethod = "POST" }, new { @class = "form-horizontal", role = "form", id = "addNewForm" }))
{
<div id="register-page" class="col-xs-12" style="border-color:rgb(241, 242, 247);">
    <div class="card_t card-s">
        <div class="form-horizontal" style="padding-top:15px;">

            <div class="form-group">
                @Html.LabelFor(model => model.Firstname, new { @class = "col-sm-2 control-label" })
                <div class="col-md-4">
                    @Html.TextBoxFor(m => m.Firstname, new { @id = "Firstname", @class = " col-sm-12 fileStyle form-control" })
                </div>

                @Html.LabelFor(model => model.LastName, new { @class = "col-sm-2 control-label" })
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.LastName, new { @class = "form-control" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.LastName, new { @class = "col-sm-2 control-label" })
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.LastName, new { @class = "form-control" })
                </div>
                @Html.LabelFor(model => model.Email, new { @class = "col-sm-2 control-label" })
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.Email, new { @class = "form-control" })
                </div>

            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Email, new { @class = "col-sm-2 control-label" })
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.Email, new { @class = "form-control" })
                </div>
                @Html.LabelFor(model => model.DateOfBirth, new { @class = "col-sm-2 control-label" })
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.DateOfBirth, new { @id = "pickdateId", @class = "form-control" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.LastName, new { @class = "col-sm-2 control-label" })
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.LastName, new { @class = "form-control" })
                </div>
                @Html.LabelFor(model => model.Email, new { @class = "col-sm-2 control-label" })
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.Email, new { @class = "form-control" })
                </div>

            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Email, new { @class = "col-sm-2 control-label" })
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.Email, new { @class = "form-control" })
                </div>
                @Html.LabelFor(model => model.DateOfBirth, new { @class = "col-sm-2 control-label" })
                <div class="col-md-4">
                    @Html.TextBoxFor(model => model.DateOfBirth, new { @id = "pickdateId", @class = "form-control" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.DateOfBirth, new { @class = "col-sm-2 control-label" })
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.DateOfBirth, new { @id = "pickdateId", @class = "form-control" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Photo, new { @class = "col-sm-2 control-label" })
                <div class="col-md-10">
                    @Html.TextBoxFor(m => m.Photo, new { type = "file", @id = "uploaFile", @class = "uploaFile col-sm-12 fileStyle form-control" })
                </div>
            </div>

            <div class="form-group" style="display:none;">
                <div id="parentImgId" class="col-md-offset-4 col-md-8">
                    <img id="targetImg" class="thumbnail img-responsive" />
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input id="btnSave" type="submit" value="Save" class="btn btn-primary" onclick='return validateStudent()' />
                </div>
            </div>
        </div>
    </div>
</div>
}

<script>

    $(document).ready(function () {
        $("#uploaFile").change(function () {

        });
    });



</script>



    <script>

        $("#phone1,#phone2").keyup(function (me) {
                ClassValidationHelper.formatPhoneNumber(me);
        });

        function validateStudent() {
           
            var dropBox = ['languageId', 'provinceId', 'suburbId', 'locationId'];
            var _inputs = ['Firstname', 'LastName', 'DateOfBirth', 'genderId', 'cityId', 'unitNumber', 'houseNumber', 'streetName', 'postalCode'];
            var _phones = ['phone1', 'phone2',];
            debugger;      
             ClassValidationHelper.preValidateDropbox(dropBox);   
            var isvalid = ClassValidationHelper.ValidateInput(_inputs)
            if (isvalid === false) {
                ClassValidationHelper.errorEmptyField();
                return isvalid
            }
            isvalid = ClassValidationHelper.ValidatePhone(_phones)
            if (isvalid === false) {
                ClassValidationHelper.errorEmptyField();
                return isvalid
            }
            return isvalid;
        }


        function OnSuccess(response) {

            classBusyIconHelper.hideBusyIcon();
            if (response.result === "true") {
                var msgObj = { message: response.message, type: "success", title: response.title, pageId: "" };
                classMessageResponse.showMessage(msgObj);
            }
            else {
                var msgObj = { message: response.message, type: "error", title: response.title, pageId: "" };
                classMessageResponse.showMessage(msgObj);
            }
        }

        function OnFailure(response) {
            var msgObj = { message: "error", type: "error", title: "error", pageId: "" };
            classMessageResponse.showMessage(msgObj);
            $('.btnlogColor').prop('disabled', false);
        }




        //$('#pickdateId').click(function () {

        //    /* var container = $('.bootstrap-iso form').length > 0 ? $('.bootstrap-iso form').parent() : "body";*/
        //    $('#pickdateId').datepicker({
        //        format: 'yyyy/mm/dd',
        //        /* container: container,*/
        //        todayHighlight: true,
        //        autoclose: true,
        //    });
        //});


        //$('#pickdateId').datepicker({
        //    format: 'yyyy/mm/dd',
        //    /* container: container,*/
        //    todayHighlight: true,
        //    autoclose: true,
        //});


        //$('#pickdateId').datepicker({
        //        format: 'yyyy-mm-dd',
        //        todayHighlight: true,
        //        autoclose: true,
        //    });

    </script>

