@model School.UI.ViewModels.BooksViewModel

<style>

    .card_t {
        border-radius: 2px;
        display: inline-block;
        min-height: 50px;
        margin: 1rem;
        position: relative;
        width: calc(100% - 20px);
        padding-top: 10px;
    }

    .card-s {
        box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
        transition: all 0.3s cubic-bezier(.25,.8,.25,1);
    }

        .card-s:hover {
            box-shadow: 0 2px 4px rgba(0,0,0,0.25), 0 2px 2px rgba(0,0,0,0.22);
        }
</style>


<div id="teacher-page" class="col-md-12" style="border: 0px solid white; display: inline-block;">

    <div class="col-md-12" style="border: 0px solid white; display: block;">

        <div class="card_t card-s" style="height:150px;">

            <div class="col-xs-12 form-horizontal">
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-4">
                        <select id="searchId" class="form-control"  readonly="readonly" disabled="disabled">
                            <option value="--Select--" selected>--all--</option>
                            <option value="Grade">Grade</option>
                            <option value="Gender">Subject</option>
                        </select>
                    </div>
                    <div class="col-md-offset-2 col-md-4">
                        <input id="textOrOptionId" type="text" placeholder="Search by Grade" class="col-md-12 form-control"  readonly="readonly"  disabled="disabled"/>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Books.GradeName, new { @class = "col-sm-2 control-label" })
                    <div class="col-md-4">
                        @Html.TextBoxFor(model => model.Books.GradeName, new { @id = "GradeName", @class = "form-control" })
                    </div>
                    @Html.LabelFor(model => model.Books.SubjectName, new { @class = "col-sm-2 control-label" })
                    <div id="divCityId" class="col-md-4">
                        @Html.TextBoxFor(model => model.Books.SubjectName, new { @id = "SubjectName", @class = "form-control" })
                    </div>

                </div>

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input id="btnSave" type="submit" value="Search" class="btn btn-primary"  disabled="disabled" onclick='return validateInput()' />
                    </div>
                </div>

            </div>
        </div>
    </div>

    <hr />
    <div class="col-md-12" style="border: 0px solid white; display: inline-block;">

        <div class="card_t card-s">

            <div id="tableHolderId" class="col-xs-12" style="padding:15px;">

                <table id="tableId" class="table" style="background-color:white; border:1px solid silver;">
                    <thead style="background-color:rgb(240, 240, 240);">
                        <tr>
                            <th>
                                @Html.DisplayNameFor(model => model.Books.BookId)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Books.BookName)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Books.Author)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Books.GradeName)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Books.SubjectName)
                            </th>
                            <th style="display:block;">
                                Download
                            </th>

                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.BooksList)
                        {
                        <tr>
                            <td>
                                @Html.DisplayFor(modelItem => item.BookId)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.BookName)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Author)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.GradeName)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.SubjectName)
                            </td>
                            <td style="display:block;">
                                <button id="btnDownload" type="button" class="btnDownload btn btn-primary" style="width:100px;display:block;">Download</button>
                            </td>
                        </tr>
                        }
                    </tbody>
                </table>

            </div>
        </div>
    </div>

</div>

<script>

    $('#tableId #btnRoles').click(function (event) {
        event.preventDefault();
        event.stopPropagation();
        var userId = $(this).closest('td').parent('tr').find("td:eq(0)").text();
        var Firstname = $(this).closest('td').parent('tr').find("td:eq(1)").text();
        var LastName = $(this).closest('td').parent('tr').find("td:eq(2)").text();
        var data = {
            'userId': userId.trim(),
            'Firstname': Firstname.trim(),
            'LastName': LastName.trim()
        };

        var header = 'Teacher Information';
        var url = '/Roles/assignRoles';
        if (this.id === "btnRoles") {
            header = 'Teacher\'s Roles';
            url = '/Roles/assignRoles';
        }

        var objPopup = classPageConstant.popupChildOne;
        var pageObj = { function: "popup", url: url, type: "Post", data: data, header: header, pageId: "", objPopup: objPopup };
        classControllerHelper.callController(pageObj);
    });




    $("#searchId").change(function (event) {
        event.preventDefault();
        event.stopPropagation();
        //debugger;
        var selectedValue = $("#searchId option:selected").val();
        var data = {
            'selectedValue': selectedValue.trim(),
        };
        var _searchValue = selectedValue.trim();

        var partialHolder = "#partialTableSubjectHolder";
        var url = '/TeacherRegister/dropBoxUpdateSimple';
        var pageObj = {};
        if (_searchValue === "Grade" || _searchValue === "Gender") {
            header = 'Update UserInfor';
            url = '/TeacherRegister/dropBoxUpdateSimple';
            partialHolder = "#inputHolderId";
            pageObj = { function: "append", url: url, type: "Post", data: data, header: header, pageId: "", partialHolder: partialHolder };
            classControllerHelper.callController(pageObj);
        }
        else {
            partialHolder = "#inputHolderId";
            var response = '<input id="textOrOptionId" type="text" placeholder="search by name" class="textOrOptionId col-md-12 form-control" />'
            pageObj = { function: "append", partialHolder: partialHolder };
            classControllerHelper.appendPartial(response, pageObj);
        }
    });

</script>
