@model School.UI.ViewModels.TeacherVM.TeacherRoleSimpleViewModel



<table id="tableId1" class="table" style="border:1px solid silver;">
    <thead style="background-color:rgb(47, 71, 86);color:white;">
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.GradeId)
            </th>

            <th>
                @Html.DisplayNameFor(model => model.SubjectId)
            </th>

            <th>
                @Html.DisplayNameFor(model => model.SubjectName)
            </th>

            <th>
                <input type="checkbox" id="selectAllId" /> @*@Html.DisplayNameFor(model => model.IsSelected)*@
            </th>

            <th>
                @Html.DisplayNameFor(model => model.Status)
            </th>

        </tr>
    </thead>
    <tbody id="tbodyId">
        @foreach (var sub in Model.TeacherRoles)
        {

            <tr>
                @*@Html.HiddenFor(x => sub.GradeId)*@
                <td>
                    @Html.DisplayFor(m => sub.GradeId)
                </td>

                <td>
                    @Html.DisplayFor(m => sub.SubjectId)
                </td>

                <td>
                    @Html.DisplayFor(m => sub.SubjectName)
                </td>

                <td>

                    <input type="checkbox" name="ids" id="ids" value="@sub.IsSelected" />
                    @* @Html.CheckBoxFor(m => sub.IsSelected, new { @id = "IsSelected" })*@

                </td>

                <td>
                    @Html.DisplayFor(m => sub.Status)
                </td>

            </tr>
        }

    </tbody>
</table>




<script>

    function getTableState(t) {
        var matrix = [];
        var lookup = {};
        var trs = t.getElementsByTagName('TR');
        var c;
        for (var i = 0; trs[i]; i++) {
            lookup[i] = [];
            for (var j = 0; c = trs[i].cells[j]; j++) {
                var rowIndex = c.parentNode.rowIndex;
                var rowSpan = c.rowSpan || 1;
                var colSpan = c.colSpan || 1;
                var firstAvailCol;

                // initalized the matrix in this row if needed.
                if (typeof (matrix[rowIndex]) == "undefined") { matrix[rowIndex] = []; }

                // Find first available column in the first row
                for (var k = 0; k < matrix[rowIndex].length + 1; k++) {
                    if (typeof (matrix[rowIndex][k]) == "undefined") {
                        firstAvailCol = k;
                        break;
                    }
                }
                lookup[rowIndex][c.cellIndex] = firstAvailCol;
                for (var k = rowIndex; k < rowIndex + rowSpan; k++) {
                    if (typeof (matrix[k]) == "undefined") { matrix[k] = []; }
                    var matrixrow = matrix[k];
                    for (var l = firstAvailCol; l < firstAvailCol + colSpan; l++) {
                        matrixrow[l] = { cell: c, rowIndex: rowIndex };
                    }
                }
            }
        }

        // lets build a little object that has some useful funcitons for this table state.
        return {
            cellMatrix: matrix,
            lookupTable: lookup,

            // returns the "Real" column number from a passed in cell
            getRealColFromElement: function (cell) {
                var row = cell.parentNode.rowIndex;
                var col = cell.cellIndex;
                return this.lookupTable[row][col];
            },
            // returns the "point" to insert at for a square in the perceived row/column
            getPointForRowAndColumn: function (row, col) {
                var matrixRow = this.cellMatrix[row];
                var ret = 0;
                // lets look at the matrix again - this time any row that shouldn't be in this row doesn't count.
                for (var i = 0; i < col; i++) {
                    if (matrixRow[i].rowIndex == row) ret++;
                }
                return ret;
            }
        };
    }

    function scheduleClick(e) {
        if (e.target.className != 'event')
            return;

        //Get useful info before deletion
        var numRows = e.target.rowSpan;
        var cellIndex = e.target.cellIndex;
        var rowIndex = e.target.parentNode.rowIndex;
        var table = e.target.parentNode.parentNode;

        var tableState = getTableState(table);

        var colIndex = tableState.getRealColFromElement(e.target);

        //Deletion
        e.target.parentNode.deleteCell(cellIndex);

        //Insert empty cells in each row
        for (var i = 0; i < numRows; i++) {
            var row = table.rows[rowIndex + i];
            row.insertCell(tableState.getPointForRowAndColumn(rowIndex + i, colIndex));
        }
    }




    //


    function applyAll(s) {
        var obj = document.getElementsByTagName('input');

        if (!obj)
            return;
        for (var i = 0, l = obj.length; i < l; ++i) {
            if (obj[i].type == 'checkbox')
                obj[i].checked = !!s;
        }
    }
    function checkAll() {
        applyAll(true);
    }
    function unCheckAll() {
        applyAll(false);
    }



    function myfunction_test() {

        var inputs = document.getElementsByTagName("input"); //or document.forms[0].elements;
        var cbs = []; //will contain all checkboxes
        var checked = []; //will contain all checked checkboxes
        for (var i = 0; i < inputs.length; i++) {
            if (inputs[i].type == "checkbox") {
                cbs.push(inputs[i]);
                if (inputs[i].checked) {
                    checked.push(inputs[i]);
                }
            }
        }
        var nbCbs = cbs.length; //number of checkboxes
        var nbChecked = checked.length; //number of checked checkboxes



        //

        var cbs = $("input:checkbox"); //find all checkboxes
        var nbCbs = cbs.size(); //the number of checkboxes

        var checked = $("input[type=checkbox]:checked"); //find all checked checkboxes + radio buttons
        var nbChecked = checked.size();
    }


</script>



<script type="text/javascript">


    function __myfunction() {
        document.getElementById('select').onclick = function () {
            var checkboxes = document.querySelectorAll('input[name="vehicle"]:checked');
            for (var checkbox of checkboxes) {
                document.body.append(checkbox.value + ' ');
            }
        }
    }



    function update() {
        var select = document.getElementById('language');
        var option = select.options[select.selectedIndex];

        document.getElementById('value').value = option.value;
        document.getElementById('text').value = option.text;
    }

</script>