@model School.UI.ViewModels.TeacherVM.TeacherRoleSimpleViewModel

@{
    string st = "test";
}

<style>
    #childPage {
        width: 800px;
        left: calc(50% - 400px);
        display: none;
    }

        #childPage #partialHolder {
            /*height: calc(100% - 2px);*/
            border: none;
            overflow-y: hidden;
            overflow-x: hidden;
            max-height: 260px;
        }
</style>

<style>

    .card_t {
        border-radius: 2px;
        display: inline-block;
        min-height: 100px;
        margin: 1rem;
        position: relative;
        width: calc(100% - 20px);
        padding-top: 5px;
    }

    .card-s {
        box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
        transition: all 0.3s cubic-bezier(.25,.8,.25,1);
    }

        .card-s:hover {
            box-shadow: 0 2px 4px rgba(0,0,0,0.25), 0 2px 2px rgba(0,0,0,0.22);
        }

    #Home-Container #popupChildOne #partialHolder {
        background-color: white;
    }

    .rm-form-control {
        -webkit-box-shadow: none;
        box-shadow: none;
        border-radius: 0;
        border-color: white;
        border: 0px solid silver;
        background-color: white;
    }
</style>


@using (Html.BeginForm())
{
    <div class="row" style="border:solid; border-width:thin; padding:20px; height:400px;">
        <div class="col-lg-12 text-center">
            <div class="row">
                <div class="col-lg-6" align="right">
                    @Html.DropDownList("linktoMonthId", null, "--Select--", new
               {
                   @id = "ddlMonths",
                   @class = "form-control",
                   @style = "width:200px"
               })
                </div>
                <div class="col-lg-6" align="left">
                    @Html.DropDownList("linktoYearId", null, "--Select--", new
               {
                   @id = "ddlYears",
                   @onChange = "return ChangeYear(this)",
                   @class = "form-control",
                   @style = "width:200px"
               })
                </div>
            </div>
        </div>
    </div>
}


@using (Ajax.BeginForm("SaveRoles", "TeacherRegister", new AjaxOptions { OnSuccess = "OnSuccess", OnFailure = "OnFailure", HttpMethod = "POST" }, new { @class = "form-horizontal", role = "form", id = "addNewForm" }))
{
    <div id="popup-page" class="col-xs-12" style="border-color:rgb(241, 242, 247);border:0px solid red;">
        <div class="card_t card-s">
            <div class="form-horizontal" style="padding:10px;border:0px solid red;">

                <div class="form-group">
                    @Html.LabelFor(model => model.TeacherViewModel.Teacher.Firstname, new { @class = "col-sm-2 control-label" })
                    <div class="col-md-4">
                        @Html.TextBoxFor(m => m.TeacherViewModel.Teacher.Firstname, new { @class = "form-control rm-form-control", @readonly = "readonly", @style = "-webkit-box-shadow: none;box-shadow: none;border-radius: 0;border-color: white;border: 0px solid silver;background-color: white;" })
                    </div>

                    @Html.LabelFor(model => model.TeacherViewModel.Teacher.LastName, new { @class = "col-sm-2 control-label" })
                    <div class="col-md-4">
                        @Html.TextBoxFor(model => model.TeacherViewModel.Teacher.LastName, new { @class = "form-control", @readonly = "readonly", @style = "-webkit-box-shadow: none;box-shadow: none;border-radius: 0;border-color: white;border: 0px solid silver;background-color: white;" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.TeacherViewModel.Teacher.Language, new { @class = "col-sm-2 control-label" })
                    <div class="col-md-4">
                        @Html.TextBoxFor(model => model.TeacherViewModel.Teacher.Language, new { @class = "form-control", @readonly = "readonly", @style = "-webkit-box-shadow: none;box-shadow: none;border-radius: 0;border-color: white;border: 0px solid silver;background-color: white;" })
                    </div>
                    @Html.LabelFor(model => model.TeacherViewModel.Teacher.Gender, new { @class = "col-sm-2 control-label" })
                    <div class="col-md-4">
                        @Html.TextBoxFor(model => model.TeacherViewModel.Teacher.Gender, new { @id = "genderId", @class = "form-control", @readonly = "readonly", @style = "-webkit-box-shadow: none;box-shadow: none;border-radius: 0;border-color: white;border: 0px solid silver;background-color: white;" })
                    </div>
                </div>

                <hr />


                <div class="form-group">
                    @Html.LabelFor(model => model.TeacherViewModel.Grades.Grade, new { @class = "col-sm-4 control-label" })
                    <div class="col-md-8">
                        @Html.DropDownListFor(m => m.TeacherViewModel.Grades.Grade, Model.TeacherViewModel.GradeDropboxItemList, new { @id = "GradeId", @class = "form-control selectedSearchId" })
                    </div>
                </div>
                <input type="text" name="TeacherRolesId" value=@Model.TeacherRoles hidden />
                <div class="col-md-12 rm-pd" style="border: 0px solid red; display: inline-block;">
                    <div class="card_t card-s">
                        <div id="tableHolderId" class="rm-pd" style="padding:15px;">
                            <table id="tableId01" class="table" style="border:1px solid silver;">

                                <thead style="background-color:rgb(47, 71, 86);color:white;">
                                    <tr>

                                        <th>
                                            @Html.DisplayNameFor(model => model.GradeId)
                                        </th>

                                        <th>
                                            @Html.DisplayNameFor(model => model.SubjectId)
                                        </th>

                                        <th>
                                            @Html.DisplayNameFor(model => model.SubjectName)
                                        </th>

                                        <th>
                                            @Html.DisplayNameFor(model => model.IsSelected)
                                        </th>

                                        <th>
                                            @Html.DisplayNameFor(model => model.Status)
                                        </th>

                                    </tr>
                                </thead>
                                <tbody>

                                    @foreach (var sub in Model.TeacherRoles)
                                    {

                                        <tr>

                                            <td>
                                                @Html.DisplayFor(m => sub.GradeId)
                                            </td>

                                            <td>
                                                @Html.DisplayFor(m => sub.SubjectId)
                                            </td>

                                            <td>
                                                @Html.DisplayFor(m => sub.SubjectName)
                                            </td>

                                            <td>
                                                @Html.CheckBoxFor(m => m.IsSelected, new { @id = "IsSelected" })
                                            </td>

                                            <td>
                                                @Html.DisplayFor(m => sub.Status)
                                            </td>

                                        </tr>
                                    }

                                </tbody>
                            </table>
                        </div>


                        <div class="col-md-12" style="padding-bottom:5px;">
                            <input id="btnSave" type="button" value="Save" class="btn btn-primary" onclick='return validateInput()' />
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>
}

<script>

    function validateInput() {
        debugger;
        var _v1 = getTableColumns("#tableId1");
        debugger;
        var _v2 = getTableRows("#tableId1");
        debugger;

        var columns = ["GradeId", "SubjectId", "SubjectName", "Assign", "Status"];
        var _getTableData = getTableData(columns, "#tableId1");


        var _getTableDataBetter = getTableDataBetter("#tableId1");

        //var _v3 = getTableData("#tableId1");
        //debugger;


        var _tabledata = getTableDataSimple("#tableId1");









        // To Count all the columns in the table
        // and get the count of the selected elements
        //var colCount = document.getElementById("tableId").rows[0].cells.length;
        //var colNumber = $("#tableId>thead>tr>th").length;
        //var countRows = $("#tableId>tbody>tr").length;


        //var _tabledata = getTableData("tableId");

        //debugger;
        //var obj = {}
        //var _hasSelected = hasSelected(obj)

        return true;
    }


    //$('#tableId input[type="checkbox"]').click(function () {

    //    var hh = this.name;
    //    if (this.name == "present") {
    //        if (this.checked) {

    //            $(this).closest('td').parent('tr').find("td:eq(5)").text("present").css("color", "green");
    //            $(this).closest('tr').find("td:eq(4)").find('[type=checkbox]').prop('checked', false);

    //        } else {
    //            $(this).closest('td').parent('tr').find("td:eq(5)").text("not set").css("color", "black");
    //        }
    //    }
    //    else if (this.name == "absent") {
    //        if (this.checked) {
    //            $(this).closest('td').parent('tr').find("td:eq(5)").text("abset").css("color", "orange");
    //            $(this).closest('tr').find("td:eq(3)").find('[type=checkbox]').prop('checked', false);

    //        } else {
    //            $(this).closest('td').parent('tr').find("td:eq(5)").text("not set").css("color", "black");
    //        }
    //    }
    //    else {
    //        console.log("signs"); // replace with logic
    //    }

    //});

    function hasSelected(obj) {
        var countRows = $("#tableId>tbody>tr").length;
        var allRows = [];
        for (var i = 0; i < countRows; i++) {

            debugger;
            var GradeId = $('#tableId>tbody').find("tr:eq(" + i + ")").find("td:eq(0)").text();
            var SubjectId = $('#tableId>tbody').find("tr:eq(" + i + ")").find("td:eq(1)").text();
            var SubjectName = $('#tableId>tbody').find("tr:eq(" + i + ")").find("td:eq(2)").text();
            var IsSElected = $('#tableId>tbody').find("tr:eq(" + i + ")").find("td:eq(0)").text();
            var Status = $('#tableId>tbody').find("tr:eq(" + i + ")").find("td:eq(4)").text();

            var ischeked = $('#tableId>tbody').find("tr:eq(" + i + ")").find("td:eq(3) [type=checkbox]:eq(0)").prop('checked');
            var IsSElected = $('#tableId>tbody').find("tr:eq(" + i + ")").find("td:eq(3) [type=checkbox]:eq(0)").prop('checked');

            if (ischeked === true) {
                // return true;
            }
        }

        // return flase;
    }





    function OnSuccess(response) {

        classBusyIconHelper.hideBusyIcon();
        if (response.result === "true") {
            var msgObj = { message: response.message, type: "success", title: response.title, pageId: "" };
            classMessageResponse.showMessage(msgObj);
        }
        else {
            var msgObj = { message: response.message, type: "error", title: response.title, pageId: "" };
            classMessageResponse.showMessage(msgObj);
        }
    }

    function OnFailure(response) {
        var msgObj = { message: "error", type: "error", title: "error", pageId: "" };
        classMessageResponse.showMessage(msgObj);
        $('.btnlogColor').prop('disabled', false);
    }


    $("#GradeId").change(function (event) {
        event.preventDefault();
        event.stopPropagation();
        var selectedValue = $("#GradeId option:selected").val();
        var data = {
            'GradeId': selectedValue.trim()
        };

        var _searchValue = selectedValue.trim().substring(0, 5);

        var partialHolder = "#popup-page #tableHolderId";
        var header = 'Update UserInfor';
        var url = '/TeacherRegister/GetSubjects';
        var pageObj = { function: "append", url: url, type: "Post", data: data, header: header, pageId: "", partialHolder: partialHolder };
        classControllerHelper.callController(pageObj);

    });






    function getTableData_0(tablename) {
        debugger;
        var tableID = "tableId";
        var tableElementById = document.getElementById("tableId");
        debugger;
        var thead = tableElementById.getElementsByTagName('thead')[0];
        var tableColumn = thead.getElementsByTagName('th');
        var countColumn = tableColumn.length;






        var tBody = tableElementById.getElementsByTagName('tbody')[0];
        var tableRow = tBody.getElementsByTagName('tr');
        var countRow = tableRow.length;

        var TexBoxArray = [];
        var allRows = [];
        for (var i = 0; i < countRow; i++) {

            var rowObject = {};

            for (var j = 0; j < countColumn; j++) {

                //var GradeId = $('#tableId>tbody').find("tr:eq(" + i + ")").find("td:eq(0)").text();
                //var SubjectId = $('#tableId>tbody').find("tr:eq(" + i + ")").find("td:eq(1)").text();
                //var SubjectName = $('#tableId>tbody').find("tr:eq(" + i + ")").find("td:eq(2)").text();
                //var IsSElected = $('#tableId>tbody').find("tr:eq(" + i + ")").find("td:eq(0)").text();
                //var Status = $('#tableId>tbody').find("tr:eq(" + i + ")").find("td:eq(4)").text();
                //var ischeked = $('#tableId>tbody').find("tr:eq(" + i + ")").find("td:eq(3) [type=checkbox]:eq(0)").prop('checked');
                //var IsSElected = $('#tableId>tbody').find("tr:eq(" + i + ")").find("td:eq(3) [type=checkbox]:eq(0)").prop('checked');


                //var isTextbox = $('#' + tableID + '>tbody').find("tr:eq(" + i + ")").find("td:eq(" + j + ")").find(':input[type="text"]');
                var ischeked = $('#' + tableID + '>tbody').find("tr:eq(" + i + ")").find("td:eq(" + j + ")").find(':input[type="checkbox"]');
                var cellValue = "";

                if (ischeked.length > 0) {
                    //cellValue = $('#tableId>tbody').find("tr:eq(" + i + ")").find("td:eq(3) [type=checkbox]:eq(0)").prop('checked');
                    cellValue = $('#tableId>tbody').find("tr:eq(" + i + ")").find("td:eq(" + j + ") [type=checkbox]:eq(0)").prop('checked');
                }
                else if (isTextbox.length > 0) {
                    cellValue = $('#' + tableID + '>tbody').find("tr:eq(" + i + ")").find("td:eq(" + j + ") input:eq(0)").val();
                }
                else {
                    cellValue = $('#' + tableID + '>tbody').find("tr:eq(" + i + ")").find("td:eq(" + j + ")").text();
                }
                //var getPropertyName = $('#tbMessage>thead').find("tr:eq(" + 0 + ")").find("th:eq(" + j + ")").text();
                var getPropertyName = $('#' + tableID + '>thead').find("tr:eq(" + 0 + ")").find("th:eq(" + j + ")").text();

                var propertyName = getPropertyName;
                rowObject[propertyName] = cellValue;
            }

            allRows.push(rowObject);
        }


        return allRows;
    };

</script>