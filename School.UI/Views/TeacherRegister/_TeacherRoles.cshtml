@model School.UI.ViewModels.TeacherVM.TeacherRoleSimpleViewModel

@{ 
    string st = "test";
}

<style>
    #childPage {
        width: 800px;
        left: calc(50% - 400px);
        display: none;
    }

        #childPage #partialHolder {
            /*height: calc(100% - 2px);*/
            border: none;
            overflow-y: hidden;
            overflow-x: hidden;
            max-height: 260px;
        }
</style>

<style>

    .card_t {
        border-radius: 2px;
        display: inline-block;
        min-height: 100px;
        margin: 1rem;
        position: relative;
        width: calc(100% - 20px);
        padding-top: 5px;
    }

    .card-s {
        box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
        transition: all 0.3s cubic-bezier(.25,.8,.25,1);
    }

        .card-s:hover {
            box-shadow: 0 2px 4px rgba(0,0,0,0.25), 0 2px 2px rgba(0,0,0,0.22);
        }

    #Home-Container #popupChildOne #partialHolder{
        background-color:white;
    }

    .rm-form-control {
        -webkit-box-shadow: none;
        box-shadow: none;
        border-radius: 0;
        border-color: white;
        border: 0px solid silver;
        background-color: white;
    }
</style>


@using (Ajax.BeginForm("SaveRoles", "TeachingRoles", new AjaxOptions { OnSuccess = "OnSuccess", OnFailure = "OnFailure", HttpMethod = "POST" }, new { @class = "form-horizontal",id = "addNewForm22" }))
{
    <div id="popup-page" class="col-xs-12" style="border-color:rgb(241, 242, 247);border:0px solid red;">
        <div class="card_t card-s">
            <div class="form-horizontal" style="padding:10px;border:0px solid red;">

                <div class="form-group">
                    @Html.LabelFor(model => model.TeacherViewModel.Teacher.Firstname, new { @class = "col-sm-2 control-label" })
                    <div class="col-md-4">
                        @Html.TextBoxFor(m => m.TeacherViewModel.Teacher.Firstname, new { @class = "form-control rm-form-control", @readonly = "readonly", @style = "-webkit-box-shadow: none;box-shadow: none;border-radius: 0;border-color: white;border: 0px solid silver;background-color: white;" })
                    </div>

                    @Html.LabelFor(model => model.TeacherViewModel.Teacher.LastName, new { @class = "col-sm-2 control-label" })
                    <div class="col-md-4">
                        @Html.TextBoxFor(model => model.TeacherViewModel.Teacher.LastName, new { @class = "form-control", @readonly = "readonly", @style = "-webkit-box-shadow: none;box-shadow: none;border-radius: 0;border-color: white;border: 0px solid silver;background-color: white;" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.TeacherViewModel.Teacher.Language, new { @class = "col-sm-2 control-label" })
                    <div class="col-md-4">
                        @Html.TextBoxFor(model => model.TeacherViewModel.Teacher.Language, new { @class = "form-control", @readonly = "readonly", @style = "-webkit-box-shadow: none;box-shadow: none;border-radius: 0;border-color: white;border: 0px solid silver;background-color: white;" })
                    </div>
                    @Html.LabelFor(model => model.TeacherViewModel.Teacher.Gender, new { @class = "col-sm-2 control-label" })
                    <div class="col-md-4">
                        @Html.TextBoxFor(model => model.TeacherViewModel.Teacher.Gender, new { @id = "genderId", @class = "form-control", @readonly = "readonly", @style = "-webkit-box-shadow: none;box-shadow: none;border-radius: 0;border-color: white;border: 0px solid silver;background-color: white;" })
                    </div>
                </div>

                <hr />


                <div class="form-group">
                    @Html.LabelFor(model => model.TeacherViewModel.Grades.Grade, new { @class = "col-sm-2 control-label" })
                    <div class="col-md-4">
                        @Html.DropDownListFor(m => m.TeacherViewModel.Grades.Grade, Model.TeacherViewModel.GradeDropboxItemList, new { @id = "GradeId", @class = "form-control selectedSearchId" })
                    </div>
                    @Html.LabelFor(model => model.TeacherViewModel.ClassOrCourse.ClassName, new { @class = "col-sm-2 control-label" })
                    <div class="col-md-4">
                        @Html.DropDownListFor(m => m.TeacherViewModel.ClassOrCourse.ClassName, Model.TeacherViewModel.ClassOrCourseDropboxItemList, new { @id = "classId", @class = "form-control" })
                    </div>
                </div>
                <input type="hidden" name="TeacherRolesId" id="TeacherRolesId" value=@Model.TeacherRoles hidden />
                <input type="hidden" name="hidInput" id="hidInput" value="" />
                <input type="hidden" name="hiddenGrade" id="hiddenGrade" value="" />
                <input type="hidden" name="hiddenClass" id="hiddenClass" value="" />
                <input type="hidden" name="hiddenTeacherId" id="hiddenTeacherId" value=@Model.TeacherViewModel.Teacher.TeacherId hidden /> 
                <div class="col-md-12 rm-pd" style="border: 0px solid red; display: inline-block;">
                    <div class="card_t card-s">
                        <div id="tableHolderId" class="rm-pd" style="padding:15px;">
                            <table id="tableId01" class="table" style="border:1px solid silver;">

                                <thead style="background-color:rgb(47, 71, 86);color:white;">
                                    <tr>

                                        <th>
                                            @Html.DisplayNameFor(model => model.GradeId)
                                        </th>

                                        <th>
                                            @Html.DisplayNameFor(model => model.SubjectId)
                                        </th>

                                        <th>
                                            @Html.DisplayNameFor(model => model.SubjectName)
                                        </th>

                                        <th>
                                            @Html.DisplayNameFor(model => model.IsSelected)
                                        </th>

                                        <th>
                                            @Html.DisplayNameFor(model => model.Status)
                                        </th>

                                    </tr>
                                </thead>
                                <tbody>

                                    @foreach (var sub in Model.TeacherRoles)
                                    {
                                        <tr>
                                            <td>
                                                @Html.DisplayFor(m => sub.GradeId)
                                            </td>

                                            <td>
                                                @Html.DisplayFor(m => sub.SubjectId)
                                            </td>

                                            <td>
                                                @Html.DisplayFor(m => sub.SubjectName)
                                            </td>

                                            <td>
                                                @Html.CheckBoxFor(m => m.IsSelected, new { @id = "IsSelected" })
                                            </td>

                                            <td>
                                                @Html.DisplayFor(m => sub.Status)
                                            </td>
                                        </tr>
                                    }

                                </tbody>
                            </table>
                        </div>


                        <div class="col-md-12" style="padding-bottom:5px;">
                            <input id="btnSave" type="button" value="Save" class="btn btn-primary" onclick='return validateInput()' />
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>
}

    <script>

        var teachingRoles = {
            'TeacherId': "",
            'GradeId': "",
            'SubjectId': "",
            'ClassId': ""
        };

        function getDatas() {
            var _v1 = getTableColumns("#tableId1");
            var _v2 = getTableRows("#tableId1");
            var columns = ["GradeId", "SubjectId", "SubjectName", "Assign", "Status"];
            var _getTableData = getTableData(columns, "#tableId1");
        }


        function validateInput() {
            //var obj = {}
            //var _hasSelected = hasSelected(obj)
            var columns = ["GradeId", "SubjectId", "SubjectName", "Assign", "Status"];
            var _getTableData = getTableData(columns, "#tableId1");
            var $hidInput = $("#hidInput");
            $hidInput.val(JSON.stringify(_getTableData));  

            if (hasSelected===false) {
                return false;
            }

            //teachingRoles.StudentId = hiddenTeacherId.trim();
               
            var data = {
                'jsonStringSubject': JSON.stringify(_getTableData),
                'jsonStringRoles': JSON.stringify(teachingRoles)
            };

            var url = '/TeachingRoles/SaveRoles';
            var pageObj = { function: "message", url: url, type: "Post", data: data, header: "", pageId: "", partialHolder: "" };
            classControllerHelper.callController(pageObj);

        }


        function hasSelected(obj) {
            var countRows = $("#tableId>tbody>tr").length;
            for (var i = 0; i < countRows; i++) {

                var GradeId = $('#tableId>tbody').find("tr:eq(" + i + ")").find("td:eq(0)").text();
                var SubjectId = $('#tableId>tbody').find("tr:eq(" + i + ")").find("td:eq(1)").text();
                var SubjectName = $('#tableId>tbody').find("tr:eq(" + i + ")").find("td:eq(2)").text();
                var IsSElected = $('#tableId>tbody').find("tr:eq(" + i + ")").find("td:eq(0)").text();
                var Status = $('#tableId>tbody').find("tr:eq(" + i + ")").find("td:eq(4)").text();
                var ischeked = $('#tableId>tbody').find("tr:eq(" + i + ")").find("td:eq(3) [type=checkbox]:eq(0)").prop('checked');
                var IsSElected = $('#tableId>tbody').find("tr:eq(" + i + ")").find("td:eq(3) [type=checkbox]:eq(0)").prop('checked');

                if (ischeked === true) {
                    return true;
                }
            }
            return flase;
        }


        function OnSuccess(response) {

            classBusyIconHelper.hideBusyIcon();
            if (response.result === "true") {
                var msgObj = { message: response.message, type: "success", title: response.title, pageId: "" };
                classMessageResponse.showMessage(msgObj);
            }
            else {
                var msgObj = { message: response.message, type: "error", title: response.title, pageId: "" };
                classMessageResponse.showMessage(msgObj);
            }
        }

        function OnFailure(response) {
            var msgObj = { message: "error", type: "error", title: "error", pageId: "" };
            classMessageResponse.showMessage(msgObj);
            $('.btnlogColor').prop('disabled', false);
        }

        $("#GradeId").change(function (event) {
            event.preventDefault();
            event.stopPropagation();
            var selectedValue = $("#GradeId option:selected").val();
            var data = {
                'GradeId': selectedValue.trim()
            };

            teachingRoles.GradeId = selectedValue.trim();

            var _searchValue = selectedValue.trim().substring(0, 5);

            var partialHolder = "#popup-page #tableHolderId";
            var header = 'Update UserInfor';
            var url = '/TeacherRegister/GetSubjects';
            url = '/TeachingRoles/GetSubjects';
            var pageObj = { function: "append", url: url, type: "Post", data: data, header: header, pageId: "", partialHolder: partialHolder };
            classControllerHelper.callController(pageObj);

        });

        $("#classId").change(function (event) {
            event.preventDefault();
            event.stopPropagation();
            var selectedValue = $("#classId option:selected").val();

            var $hiddenClass = $("#hiddenClass");
            $hiddenClass.val(selectedValue.trim());  


            var hiddenTeacherId = $("#hiddenTeacherId").val();
            teachingRoles.ClassId = selectedValue.trim();
            teachingRoles.TeacherId = hiddenTeacherId.trim();

        });

    </script>    